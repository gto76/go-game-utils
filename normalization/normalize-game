#!/bin/bash

USAGE="./normalize-game filename-in"
EXPLANATION="Transforms all moves in a game using rotation and mirroring, so that first move is always in south-east side of upper right corner and also so that if possible first move that is not in that area is in south-east side of whole board.\n\
To put it another way:\n\
Transforms game using rotation and mirroring, so that as much moves in a row, beginning with the first one satisfy the following rules:\n\
	1. x >= 0\n\
	2. y >= 0\n\
	3. x >= y\n"

if [[ "$#" -eq 0 ]]; then
	echo -e "Usage: $USAGE"; echo -e "$EXPLANATION"; exit
fi

#########

# If any arguments, use first one as games filename
game=`cat "$1"`

boardSize=`echo "$game" | grep '^SZ\[' | tr -d 'SZ[]'`
moves=`echo "$game" | grep '^;[BW]\[[a-z][a-z]\]$' | tr -d ';BW[]'`

transformations=0
# Find necesary trasformations for game to be normalized.
while read -r move; do
	transformations=`find-transformations-main "$move" "$boardSize" "$transformations"`
	# If all transformations freeze bits (bits 4 to 6) have been set then break.
	if [[ "$transformations" -ge 55 ]]; then
		break
	fi
done <<< "$moves"

#echo "TRANS: $transformations TRANSEND"

# Transform game using transformations.
while read -r line; do
	# If line contains a move
	if [[ -n `echo "$line" | grep '^;[BW]\[[a-z][a-z]\]$'` ]]; then
		# get the move,
		move=`echo "$line" | tr -d ';BW[]'`
		# transform it,
		transformedMove=`transform-move "$move" "$boardSize" "$transformations"`
		# and print the line with transformed move,
		echo `echo "$line" | grep '^;[BW]\[' -o`"$transformedMove"\]
	# otherwise just print the line.
	else
		echo "$line"
	fi
done <<< "$game"
